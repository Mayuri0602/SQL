use college;

CREATE TABLE Books (
    book_id INT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    author VARCHAR(100) NOT NULL,
    genre VARCHAR(50),
    price DECIMAL(5,2) NOT NULL CHECK (price > 0),
    publication_year INT CHECK (publication_year >= 0)
);

INSERT INTO Books (book_id, title, author, genre, price, publication_year) VALUES
(1, 'The Silent Patient', 'Alex Michaelides', 'Thriller', 15.99, 2019),
(2, 'Where the Crawdads Sing', 'Delia Owens', 'Mystery', 18.99, 2018),
(3, 'Atomic Habits', 'James Clear', 'Self-help', 21.50, 2018),
(4, 'The Midnight Library', 'Matt Haig', 'Fiction', 17.25, 2020),
(5, 'Educated', 'Tara Westover', 'Memoir', 14.75, 2018),
(6, 'Becoming', 'Michelle Obama', 'Biography', 22.99, 2018),
(7, 'The Alchemist', 'Paulo Coelho', 'Fiction', 12.99, 1988);

select * from books;


CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    book_id INT NOT NULL,
    customer_name VARCHAR(100) NOT NULL,
    order_date DATE NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    total_price DECIMAL(6,2) NOT NULL CHECK (total_price >= 0),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

INSERT INTO Orders (order_id, book_id, customer_name, order_date, quantity, total_price) VALUES
(101, 1, 'John Doe', '2023-01-15', 2, 31.98),
(102, 2, 'Jane Smith', '2023-02-10', 1, 18.99),
(103, 3, 'Alice Johnson', '2023-03-05', 3, 64.50),
(104, 4, 'David Brown', '2023-04-12', 1, 17.25),
(105, 1, 'Sophia Wilson', '2023-05-25', 4, 63.96),
(106, 6, 'Michael Lee', '2023-06-08', 2, 45.98),
(107, 3, 'Emma Davis', '2023-07-19', 1, 21.50),
(108, 5, 'Olivia Taylor', '2023-08-01', 2, 29.50),
(109, 7, 'Daniel Martinez', '2023-09-05', 3, 38.97),
(110, 2, 'Lucas White', '2023-10-20', 2, 37.98);

select * from orders;

-- Find the most expensive book in the store.
select book_id, title as book_name
from books 
where price = (select max(price) from books);

-- Find books whose price is higher than the average price of books in the same genre.
-- correlated subquery
select b.book_id, b.title, genre, price
from books as b
where price > (select avg(price) from books where genre=b.genre);

-- Find the total revenue generated by each author.
select b.author, sum(o.total_price) as total_revenue
from books as b
join orders as o on b.book_id = o.book_id
group by b.author;

-- Provide the rank of books based on the price.
select *,
rank() over(order by price desc)
from books;

--  Compute the running total of revenue from book sales over time.
select order_id, order_date, total_price,
sum(total_price) over (order by order_date) as running_total_revenue
from orders;

-- Find books written by the same author.
select book_id, title, author
from books
where author in (select author from books group by author having count(*) > 1);

-- Find the book that generated the highest total revenue.
select title as book_name, sum(total_price) as total_revenue
from books as b
join orders as o on b.book_id = o.book_id
group by title
order by total_revenue desc
limit 1;

-- Find customers who placed more than one order.
select customer_name, count(*) as total_orders
from orders
group by customer_name
having count(*) > 1;

-- Find the book name and price with the second-highest price.
select title as book_name, price 
from books
where price = (select price from books order by price desc limit 1 offset 1);
-- offset 1 -> skips the first (highest) price

-- Find authors who have written multiple books and count how many books they have written.
select author, count(*) as book_count
from books
group by author having count(*) > 1;


